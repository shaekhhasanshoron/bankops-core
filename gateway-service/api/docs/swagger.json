{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/api/v1/account": {
            "get": {
                "description": "**Query Parameters:**\n\ncustomer_id:\n- Optional\n- Filter by Customer ID\n\nin_transaction:\n- Optional\n- Filter accounts currently in transaction\n- Values: true/false\n- Default: no filter applied\n\nmin_balance:\n- Optional\n- Filter by minimum balance\n\npage:\n- Optional\n- Page number for pagination\n- Default: 1\n\npagesize:\n- Optional\n- Number of accounts per page\n- Default: 50\n\norder:\n- Optional\n- Sort order (asc/desc)\n- Default: desc\n\n**Header:**\n\nAuthorization:\n- Required\n- Format: Bearer token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get Account List",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Account In Transaction (value: true/false; default won't affect the filter)",
                        "name": "in_transaction",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Minimum balance",
                        "name": "min_balance",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Number of accounts per page",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order (asc/desc)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved account list",
                        "schema": {
                            "$ref": "#/definitions/handlers.ListAccountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "**Request Body:**\n\nCustomer ID:\n- Required\n\nDeposit Amount:\n- Required\n- Must be greater than zero\n\n**Header:**\n\nAuthorization:\n- Required\n- Format: Bearer token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Create Account",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Account details",
                        "name": "account",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateAccountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "**Query Parameters:**\n\nscope:\n- Required\n- Options: **single**, **all**\n- Default: single\n- **single**: Delete one account (id = account_id)\n- **all**: Delete all accounts for customer (id = customer_id)\n\nid:\n- Required\n- AccountID (if scope=single) or CustomerID (if scope=all)\n\n**Header:**\n\nAuthorization:\n- Required\n- Format: Bearer token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Delete Account (single/all)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "single",
                        "description": "Scope (single/all)",
                        "name": "scope",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "AccountID or CustomerID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.DeleteAccountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/account/{id}/balance": {
            "get": {
                "description": "**Path Parameter:**\n\nid:\n- Required\n- AccountID of a customer account\n\n**Header:**\n\nAuthorization:\n- Required\n- Format: Bearer token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get Account balance",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "AccountID of a customer account",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetBalanceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "description": "**Request Body:**\n\nusername:\n- Required\n\npassword:\n- Required",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Login API",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/customer": {
            "get": {
                "description": "**Query Parameters:**\n\npage:\n- Optional\n- Page number for pagination\n- Default: 1\n\npagesize:\n- Optional\n- Number of customers per page\n- Default: 50\n\norder:\n- Optional\n- Sort order (asc/desc)\n- Default: desc\n\n**Header:**\n\nAuthorization:\n- Required\n- Format: Bearer token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Get Customer List",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Number of customers per page",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order (asc/desc)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ListCustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "**Request Body:**\n\nName:\n- Required\n- Max 50 characters\n\n**Header:**\n\nAuthorization:\n- Required\n- Format: Bearer token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Create Customer",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Customer details",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateCustomerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateCustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/customer/{id}": {
            "delete": {
                "description": "**Header:**\n\nAuthorization:\n- Required\n- Format: Bearer token\n\n**Path Parameter:**\n\nid:\n- Required\n- CustomerID of the customer to delete",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Delete Customer",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "CustomerID of the customer",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.DeleteCustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/customer/{id}/account": {
            "get": {
                "description": "**Path Parameter:**\n\nid:\n- Required\n- CustomerID of the customer\n\n**Query Parameters:**\n\npage:\n- Optional\n- Page number for pagination\n- Default: 1\n\npagesize:\n- Optional\n- Number of accounts per page\n- Default: 50\n\n**Header:**\n\nAuthorization:\n- Required\n- Format: Bearer token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Get Account List of customer",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "CustomerID of the customer",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Number of accounts per page",
                        "name": "pagesize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved account list",
                        "schema": {
                            "$ref": "#/definitions/handlers.ListAccountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/employee": {
            "get": {
                "description": "**Query Parameters:**\n\npage:\n- Optional\n- Page number for pagination\n- Default: 1\n\npagesize:\n- Optional\n- Number of employees per page\n- Default: 50\n\norder:\n- Optional\n- Sort order (asc/desc)\n- Default: desc\n\n**Header:**\n\nAuthorization:\n- Required\n- Format: Bearer token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Get Employee List",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Number of employee per page",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order (asc/desc)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved employee list",
                        "schema": {
                            "$ref": "#/definitions/handlers.ListEmployeeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "**Request Body:**\n\nUsername:\n- Required\n- Max 50 characters\n- Lowercase letters only\n- Underscores allowed only in middle\n\nPassword:\n- Required\n- Max 50 characters\n- Supports only A-Z, a-z, 0-9, and these special characters: ! - _ \u0026 $ @ # [ ]\n\nRole:\n- Required\n- Options: **admin**, **viewer**, **editor**\n\n**Header:**\n\nAuthorization:\n- Required\n- Format: Bearer token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Create Employee",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Employee creation data",
                        "name": "employee",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateEmployeeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Employee created successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateEmployeeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/employee/{username}": {
            "delete": {
                "description": "**Header:**\n\nAuthorization:\n- Required\n- Format: Bearer token\n\n**Path Parameter:**\n\nusername:\n- Required\n- Username of the employee to delete",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Delete Employee",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Username of the employee",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.DeleteEmployeeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/transaction": {
            "get": {
                "description": "**Query Parameters:**\n\naccount_id:\n- Optional\n- Filter by account ID\n\ncustomer_id:\n- Optional\n- Filter by customer ID\n\ntypes:\n- Optional\n- Filter by transaction types\n- Comma separated values: **transfer**, **withdraw_full**, **withdraw_amount**, **add_amount**\n\nstart_date:\n- Optional\n- Start date for filtering\n- Format: DD-MM-YYYY\n\nend_date:\n- Optional\n- End date for filtering\n- Format: DD-MM-YYYY\n\npage:\n- Optional\n- Page number for pagination\n- Default: 1\n\npagesize:\n- Optional\n- Number of transactions per page\n- Default: 50\n\norder:\n- Optional\n- Sort order (asc/desc)\n- Default: desc\n\n**Header:**\n\nAuthorization:\n- Required\n- Format: Bearer token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Get Transaction History",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Transaction history by account id",
                        "name": "account_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Transaction history by customer id",
                        "name": "customer_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma separated transaction types (transfer/withdraw_full/withdraw_amount/add_amount)",
                        "name": "types",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date for filtering (format: DD-MM-YYYY)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date for filtering (format: DD-MM-YYYY)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Number of transactions per page",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order (asc/desc)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ListTransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/transaction/init": {
            "post": {
                "description": "**Request Body:**\n\nTransaction Type:\n- Required\n- Options: **transfer**, **withdraw_full**, **withdraw_amount**, **add_amount**\n\nAmount:\n- Required for all types except **withdraw_full**\n- Must be greater than zero\n\nDestination Account ID:\n- Required only for **transfer** type\n\nReference:\n- Required for all transactions\n\n**Header:**\n\nAuthorization:\n- Required\n- Format: Bearer token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Create new transaction",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Transaction details",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.InitTransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.InitTransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.CreateAccountRequest": {
            "type": "object",
            "required": [
                "customer_id",
                "deposit_amount"
            ],
            "properties": {
                "customer_id": {
                    "type": "string"
                },
                "deposit_amount": {
                    "type": "number"
                }
            }
        },
        "handlers.CreateAccountResponse": {
            "type": "object",
            "required": [
                "account_id"
            ],
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateCustomerRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 50
                }
            }
        },
        "handlers.CreateCustomerResponse": {
            "type": "object",
            "required": [
                "customer_id"
            ],
            "properties": {
                "customer_id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateEmployeeRequest": {
            "type": "object",
            "required": [
                "password",
                "role",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 50
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "viewer",
                        "editor"
                    ]
                },
                "username": {
                    "type": "string",
                    "maxLength": 50
                }
            }
        },
        "handlers.CreateEmployeeResponse": {
            "type": "object",
            "required": [
                "username"
            ],
            "properties": {
                "message": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.DeleteAccountResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.DeleteCustomerResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.DeleteEmployeeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "handlers.GetBalanceResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.InitTransactionRequest": {
            "type": "object",
            "required": [
                "reference",
                "source_account_id",
                "transaction_type"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                },
                "destination_account_id": {
                    "type": "string"
                },
                "reference": {
                    "type": "string"
                },
                "source_account_id": {
                    "type": "string"
                },
                "transaction_type": {
                    "type": "string"
                }
            }
        },
        "handlers.InitTransactionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "transaction_id": {
                    "type": "string"
                },
                "transaction_status": {
                    "type": "string"
                }
            }
        },
        "handlers.ListAccountResponse": {
            "type": "object",
            "properties": {
                "accounts": {},
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "handlers.ListCustomerResponse": {
            "type": "object",
            "properties": {
                "customers": {},
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "handlers.ListEmployeeResponse": {
            "type": "object",
            "properties": {
                "employees": {},
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "handlers.ListTransactionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                },
                "transactions": {}
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                }
            }
        }
    }
}