definitions:
  handlers.CreateAccountRequest:
    properties:
      customer_id:
        type: string
      deposit_amount:
        type: number
    required:
    - customer_id
    - deposit_amount
    type: object
  handlers.CreateAccountResponse:
    properties:
      account_id:
        type: string
      message:
        type: string
    required:
    - account_id
    type: object
  handlers.CreateCustomerRequest:
    properties:
      name:
        maxLength: 50
        type: string
    required:
    - name
    type: object
  handlers.CreateCustomerResponse:
    properties:
      customer_id:
        type: string
      message:
        type: string
    required:
    - customer_id
    type: object
  handlers.CreateEmployeeRequest:
    properties:
      password:
        maxLength: 50
        type: string
      role:
        enum:
        - admin
        - viewer
        - editor
        type: string
      username:
        maxLength: 50
        type: string
    required:
    - password
    - role
    - username
    type: object
  handlers.CreateEmployeeResponse:
    properties:
      message:
        type: string
      username:
        type: string
    required:
    - username
    type: object
  handlers.DeleteAccountResponse:
    properties:
      message:
        type: string
    type: object
  handlers.DeleteCustomerResponse:
    properties:
      message:
        type: string
    type: object
  handlers.DeleteEmployeeResponse:
    properties:
      message:
        type: string
    type: object
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.GetBalanceResponse:
    properties:
      balance:
        type: number
      message:
        type: string
    type: object
  handlers.InitTransactionRequest:
    properties:
      amount:
        type: number
      destination_account_id:
        type: string
      reference:
        type: string
      source_account_id:
        type: string
      transaction_type:
        type: string
    required:
    - reference
    - source_account_id
    - transaction_type
    type: object
  handlers.InitTransactionResponse:
    properties:
      message:
        type: string
      transaction_id:
        type: string
      transaction_status:
        type: string
    type: object
  handlers.ListAccountResponse:
    properties:
      accounts: {}
      message:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      totalCount:
        type: integer
      totalPages:
        type: integer
    type: object
  handlers.ListCustomerResponse:
    properties:
      customers: {}
      message:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      totalCount:
        type: integer
      totalPages:
        type: integer
    type: object
  handlers.ListEmployeeResponse:
    properties:
      employees: {}
      message:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      totalCount:
        type: integer
      totalPages:
        type: integer
    type: object
  handlers.ListTransactionResponse:
    properties:
      message:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      totalCount:
        type: integer
      totalPages:
        type: integer
      transactions: {}
    type: object
  handlers.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  handlers.LoginResponse:
    properties:
      access_token:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/account:
    delete:
      consumes:
      - application/json
      description: |-
        **Query Parameters:**

        scope:
        - Required
        - Options: **single**, **all**
        - Default: single
        - **single**: Delete one account (id = account_id)
        - **all**: Delete all accounts for customer (id = customer_id)

        id:
        - Required
        - AccountID (if scope=single) or CustomerID (if scope=all)

        **Header:**

        Authorization:
        - Required
        - Format: Bearer token
      parameters:
      - default: Bearer
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - default: single
        description: Scope (single/all)
        in: query
        name: scope
        required: true
        type: string
      - description: AccountID or CustomerID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.DeleteAccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete Account (single/all)
      tags:
      - Account
    get:
      consumes:
      - application/json
      description: |-
        **Query Parameters:**

        customer_id:
        - Optional
        - Filter by Customer ID

        in_transaction:
        - Optional
        - Filter accounts currently in transaction
        - Values: true/false
        - Default: no filter applied

        min_balance:
        - Optional
        - Filter by minimum balance

        page:
        - Optional
        - Page number for pagination
        - Default: 1

        pagesize:
        - Optional
        - Number of accounts per page
        - Default: 50

        order:
        - Optional
        - Sort order (asc/desc)
        - Default: desc

        **Header:**

        Authorization:
        - Required
        - Format: Bearer token
      parameters:
      - default: Bearer
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Customer ID
        in: query
        name: customer_id
        type: string
      - description: 'Account In Transaction (value: true/false; default won''t affect
          the filter)'
        in: query
        name: in_transaction
        type: string
      - description: Minimum balance
        in: query
        name: min_balance
        type: string
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      - default: 50
        description: Number of accounts per page
        in: query
        name: pagesize
        type: integer
      - default: desc
        description: Sort order (asc/desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved account list
          schema:
            $ref: '#/definitions/handlers.ListAccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get Account List
      tags:
      - Account
    post:
      consumes:
      - application/json
      description: |-
        **Request Body:**

        Customer ID:
        - Required

        Deposit Amount:
        - Required
        - Must be greater than zero

        **Header:**

        Authorization:
        - Required
        - Format: Bearer token
      parameters:
      - default: Bearer
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Account details
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateAccountRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.CreateAccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create Account
      tags:
      - Account
  /api/v1/account/{id}/balance:
    get:
      consumes:
      - application/json
      description: |-
        **Path Parameter:**

        id:
        - Required
        - AccountID of a customer account

        **Header:**

        Authorization:
        - Required
        - Format: Bearer token
      parameters:
      - default: Bearer
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: AccountID of a customer account
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetBalanceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get Account balance
      tags:
      - Account
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: |-
        **Request Body:**

        username:
        - Required

        password:
        - Required
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Login API
      tags:
      - Authentication
  /api/v1/customer:
    get:
      consumes:
      - application/json
      description: |-
        **Query Parameters:**

        page:
        - Optional
        - Page number for pagination
        - Default: 1

        pagesize:
        - Optional
        - Number of customers per page
        - Default: 50

        order:
        - Optional
        - Sort order (asc/desc)
        - Default: desc

        **Header:**

        Authorization:
        - Required
        - Format: Bearer token
      parameters:
      - default: Bearer
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      - default: 50
        description: Number of customers per page
        in: query
        name: pagesize
        type: integer
      - default: desc
        description: Sort order (asc/desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ListCustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get Customer List
      tags:
      - Customer
    post:
      consumes:
      - application/json
      description: |-
        **Request Body:**

        Name:
        - Required
        - Max 50 characters

        **Header:**

        Authorization:
        - Required
        - Format: Bearer token
      parameters:
      - default: Bearer
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Customer details
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.CreateCustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create Customer
      tags:
      - Customer
  /api/v1/customer/{id}:
    delete:
      consumes:
      - application/json
      description: |-
        **Header:**

        Authorization:
        - Required
        - Format: Bearer token

        **Path Parameter:**

        id:
        - Required
        - CustomerID of the customer to delete
      parameters:
      - default: Bearer
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: CustomerID of the customer
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.DeleteCustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete Customer
      tags:
      - Customer
  /api/v1/customer/{id}/account:
    get:
      consumes:
      - application/json
      description: |-
        **Path Parameter:**

        id:
        - Required
        - CustomerID of the customer

        **Query Parameters:**

        page:
        - Optional
        - Page number for pagination
        - Default: 1

        pagesize:
        - Optional
        - Number of accounts per page
        - Default: 50

        **Header:**

        Authorization:
        - Required
        - Format: Bearer token
      parameters:
      - default: Bearer
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: CustomerID of the customer
        in: path
        name: id
        required: true
        type: string
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      - default: 50
        description: Number of accounts per page
        in: query
        name: pagesize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved account list
          schema:
            $ref: '#/definitions/handlers.ListAccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get Account List of customer
      tags:
      - Customer
  /api/v1/employee:
    get:
      consumes:
      - application/json
      description: |-
        **Query Parameters:**

        page:
        - Optional
        - Page number for pagination
        - Default: 1

        pagesize:
        - Optional
        - Number of employees per page
        - Default: 50

        order:
        - Optional
        - Sort order (asc/desc)
        - Default: desc

        **Header:**

        Authorization:
        - Required
        - Format: Bearer token
      parameters:
      - default: Bearer
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      - default: 50
        description: Number of employee per page
        in: query
        name: pagesize
        type: integer
      - default: desc
        description: Sort order (asc/desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved employee list
          schema:
            $ref: '#/definitions/handlers.ListEmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get Employee List
      tags:
      - Employee
    post:
      consumes:
      - application/json
      description: |-
        **Request Body:**

        Username:
        - Required
        - Max 50 characters
        - Lowercase letters only
        - Underscores allowed only in middle

        Password:
        - Required
        - Max 50 characters
        - Supports only A-Z, a-z, 0-9, and these special characters: ! - _ & $ @ # [ ]

        Role:
        - Required
        - Options: **admin**, **viewer**, **editor**

        **Header:**

        Authorization:
        - Required
        - Format: Bearer token
      parameters:
      - default: Bearer
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Employee creation data
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateEmployeeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Employee created successfully
          schema:
            $ref: '#/definitions/handlers.CreateEmployeeResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized - Missing or invalid token
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create Employee
      tags:
      - Employee
  /api/v1/employee/{username}:
    delete:
      consumes:
      - application/json
      description: |-
        **Header:**

        Authorization:
        - Required
        - Format: Bearer token

        **Path Parameter:**

        username:
        - Required
        - Username of the employee to delete
      parameters:
      - default: Bearer
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Username of the employee
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.DeleteEmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete Employee
      tags:
      - Employee
  /api/v1/transaction:
    get:
      consumes:
      - application/json
      description: |-
        **Query Parameters:**

        account_id:
        - Optional
        - Filter by account ID

        customer_id:
        - Optional
        - Filter by customer ID

        types:
        - Optional
        - Filter by transaction types
        - Comma separated values: **transfer**, **withdraw_full**, **withdraw_amount**, **add_amount**

        start_date:
        - Optional
        - Start date for filtering
        - Format: DD-MM-YYYY

        end_date:
        - Optional
        - End date for filtering
        - Format: DD-MM-YYYY

        page:
        - Optional
        - Page number for pagination
        - Default: 1

        pagesize:
        - Optional
        - Number of transactions per page
        - Default: 50

        order:
        - Optional
        - Sort order (asc/desc)
        - Default: desc

        **Header:**

        Authorization:
        - Required
        - Format: Bearer token
      parameters:
      - default: Bearer
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Transaction history by account id
        in: query
        name: account_id
        type: string
      - description: Transaction history by customer id
        in: query
        name: customer_id
        type: string
      - description: Comma separated transaction types (transfer/withdraw_full/withdraw_amount/add_amount)
        in: query
        name: types
        type: string
      - description: 'Start date for filtering (format: DD-MM-YYYY)'
        in: query
        name: start_date
        type: string
      - description: 'End date for filtering (format: DD-MM-YYYY)'
        in: query
        name: end_date
        type: string
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      - default: 50
        description: Number of transactions per page
        in: query
        name: pagesize
        type: integer
      - default: desc
        description: Sort order (asc/desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ListTransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get Transaction History
      tags:
      - Transaction
  /api/v1/transaction/init:
    post:
      consumes:
      - application/json
      description: |-
        **Request Body:**

        Transaction Type:
        - Required
        - Options: **transfer**, **withdraw_full**, **withdraw_amount**, **add_amount**

        Amount:
        - Required for all types except **withdraw_full**
        - Must be greater than zero

        Destination Account ID:
        - Required only for **transfer** type

        Reference:
        - Required for all transactions

        **Header:**

        Authorization:
        - Required
        - Format: Bearer token
      parameters:
      - default: Bearer
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Transaction details
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/handlers.InitTransactionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.InitTransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create new transaction
      tags:
      - Transaction
swagger: "2.0"
